/**
 * 
 */
package com.javaen.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.javaen.model.Activo;
import com.javaen.model.Filtro;
import com.javaen.model.TipoActivo;

/**
 * @author giovanni
 *
 */
public class ActivosDaoImpl implements ActivosDao {
	
	private static final Logger logger = LoggerFactory.getLogger(ActivosDaoImpl.class);

	private SessionFactory sessionFactory;
	
	public void setSessionFactory(SessionFactory sf){
		this.sessionFactory = sf;
	}

	@Override
	public void addActivo(Activo a) {
		Session session = this.sessionFactory.getCurrentSession();
		session.persist(a);
		logger.info("Activo saved successfully, Activo Details=" + a);
	}

	@Override
	public void updateActivo(Activo a) {
		Session session = this.sessionFactory.getCurrentSession();
		session.update(a);
		logger.info("Activo updated successfully, Activo Details=" + a);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Activo> listActivos() {
		Session session = this.sessionFactory.getCurrentSession();
		Query query = session.createQuery("From Activo");		
		List<Activo> activoList = (List<Activo>)query.list();		
		return activoList;
	}

	@Override
	public Activo getActivoById(int id) {
		Session session = this.sessionFactory.getCurrentSession();
		Query query = session.createQuery("From Activo a where a.id = :id");
		query.setParameter("id", id);
		Activo a = (Activo) query.uniqueResult();
		logger.info("Activo loaded successfully, activo details="+ a);
		return a;
	}

	@Override
	public void removeActivo(int id) {
		Session session = this.sessionFactory.getCurrentSession();
		Query query = session.createQuery("From Activo a where a.id = :id");
		query.setParameter("id", id);
		Activo a = (Activo) query.uniqueResult();
		if(a != null){
			session.delete(a);
		}
		logger.info("Activo deleted successfully, activo details=" + a);		
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<TipoActivo> listTipoActivos() {
		Session session = this.sessionFactory.getCurrentSession();		
		Query query = session.createQuery("from TipoActivo");
		List<TipoActivo> activoList = query.list();
		for(TipoActivo p : activoList){
			logger.info("TipoActivo List::" + p);
			System.out.println("TipoActivo List::" + p);
		}
		
		return activoList;
	}

	@Override
	public Activo getActivoByName(String name){
        Session session = this.sessionFactory.getCurrentSession();		
		Query query = session.createQuery("from Activo a where a.activo = :nombre");
		query.setParameter("nombre", name);
		Activo a = (Activo) query.uniqueResult();
		if(a != null){
			return a;
		}		
		return null;
	}

	@Override
	public TipoActivo getTipoById(String id) {
		Session session = this.sessionFactory.getCurrentSession();
		Query query = session.createQuery("from TipoActivo t where t.id = :id");
		query.setParameter("id", Integer.parseInt(id));
		return (TipoActivo) query.uniqueResult();		
	}

	@Override
	public List<Activo> filtrar(Filtro filtro) {
		Session session = this.sessionFactory.getCurrentSession();
		Query query = session.createQuery("from TipoActivo t where t.id = :id");
		
		return null;
	}
	
	
	

}
